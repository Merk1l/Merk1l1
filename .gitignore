import cv2
import numpy as np

def load_and_preprocess_image(image_path):
    image = cv2.imread('4DJcl5TYRjk.jpg', cv2.IMREAD_GRAYSCALE)
    if image is None:
        raise FileNotFoundError("Изображение не найдено")

    clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(16, 16))
    enhanced = clahe.apply(image)

    height, width = image.shape
    d = max(5, min(height, width) // 100) 
    d = d if d % 2 != 0 else d + 1 
    
    blurred = cv2.bilateralFilter(enhanced, d=d, sigmaColor=75, sigmaSpace=75)  
    
    return blurred

def detect_edges(blurred_image):
    # Автоматический расчет порогов для Canny
    sigma = 0.33
    v = np.median(blurred_image)
    lower = int(max(0, (1.0 - sigma) * v))
    upper = int(min(255, (1.0 + sigma) * v))
    edges_canny = cv2.Canny(blurred_image, lower, upper)
    
    # Улучшенный оператор Собеля с нормализацией
    sobel_x = cv2.Sobel(blurred_image, cv2.CV_64F, 1, 0, ksize=5)
    sobel_y = cv2.Sobel(blurred_image, cv2.CV_64F, 0, 1, ksize=5)
    sobel_combined = cv2.magnitude(sobel_x, sobel_y)
    sobel_combined = np.uint8(255 * sobel_combined / np.max(sobel_combined))
    
    # Комбинация методов с весовыми коэффициентами
    combined_edges = cv2.addWeighted(sobel_combined, 0.5, edges_canny, 0.5, 0)
    
    return combined_edges

def refine_contours(edge_image, min_contour_area=50, kernel_size=3):
    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (kernel_size, kernel_size))
    closed = cv2.morphologyEx(edge_image, cv2.MORPH_CLOSE, kernel, iterations=3)
    opened = cv2.morphologyEx(closed, cv2.MORPH_OPEN, kernel, iterations=2)
    contours, _ = cv2.findContours(opened, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    mask = np.zeros_like(opened)
    
    for cnt in contours:
        area = cv2.contourArea(cnt)
        perimeter = cv2.arcLength(cnt, True)
        if perimeter == 0:
            continue
        
        compactness = 4 * np.pi * area / (perimeter ** 2)
        if area > min_contour_area and compactness > 0.1:
            cv2.drawContours(mask, [cnt], 0, 255, -1)
    refined = cv2.bitwise_and(opened, mask)
    refined = cv2.medianBlur(refined, 3)
    return refined

def main():
    try:
        preprocessed = load_and_preprocess_image('image.jpg')

        edges = detect_edges(preprocessed)
        cv2.imwrite('Photo.jpg', edges)
        print("Обработка завершена успешно!")
        
    except Exception as e:
        print(f"Ошибка: {str(e)}")

if __name__ == "__main__":
    main()
